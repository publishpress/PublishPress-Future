{"version":3,"file":"bulk-edit.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/DateTimePicker.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelAfterActionField.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelTop.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/Spinner.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/ToggleCalendarDatePicker.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/external var \"publishpressFutureBulkEditConfig\"","webpack://post-expirator/external var \"window\"","webpack://post-expirator/external var \"wp\"","webpack://post-expirator/external var \"wp.components\"","webpack://post-expirator/external var \"wp.data\"","webpack://post-expirator/external var \"wp.element\"","webpack://post-expirator/external var \"wp.hooks\"","webpack://post-expirator/external var \"wp.plugins\"","webpack://post-expirator/external var \"wp.url\"","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/bulk-edit.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState  } from \"@wordpress/element\";\nimport { CheckboxControl as WPCheckboxControl } from \"@wordpress/components\";\n\nexport const CheckboxControl = function (props) {\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { normalizeUnixTimeToMilliseconds } from \"../time\";\nimport { DateTimePicker as WPDateTimePicker } from \"@wordpress/components\";\n\n\nexport const DateTimePicker = ({currentDate, onChange, is12Hour, startOfWeek}) => {\n    if (typeof currentDate === 'number') {\n        currentDate = normalizeUnixTimeToMilliseconds(currentDate);\n    }\n\n    return (\n        <WPDateTimePicker\n            currentDate={currentDate}\n            onChange={onChange}\n            __nextRemoveHelpButton={true}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n        />\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleCalendarDatePicker } from './ToggleCalendarDatePicker';\nimport { PluginArea } from '@wordpress/plugins';\nimport { Fill, Slot, SlotFillProvider } from '@wordpress/components';\nimport { FutureActionPanelAfterActionField } from './FutureActionPanelAfterActionField';\nimport { FutureActionPanelTop } from './FutureActionPanelTop';\n\nconst { PanelRow, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl } = wp.components;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n\n    const [validationError, setValidationError] = useState('');\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible,\n        setHasValidData,\n        setNewStatus\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = { id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy };\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setNewStatus(props.newStatus);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleNewStatusChange = (value) => {\n        setNewStatus(value);\n\n        callOnChangeData('newStatus', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        if (!taxonomy) {\n            return;\n        }\n\n        setIsFetchingTerms(true);\n\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${taxonomy}`),\n        }).then((result) => {\n            result.terms.forEach(term => {\n                termsListByName[decodeEntities(term.name)] = term;\n                termsListById[term.id] = decodeEntities(term.name);\n            });\n\n            setTermsListByName(termsListByName);\n            setTermsListById(termsListById);\n            setTaxonomyName(decodeEntities(result.taxonomyName));\n            setIsFetchingTerms(false);\n        });\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox) {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setNewStatus(props.newStatus);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid();\n        }\n\n        if (!hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid();\n        }\n    }, [hasValidData]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n    let is24hour;\n    if (props.timeFormat === 'inherited') {\n        is24hour = !props.is12Hour;\n    } else {\n        is24hour = props.timeFormat === '24h';\n    }\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n    // Remove items from actions list if related to taxonomies and there is no taxonmoy for the post type\n    let actionsSelectOptions = props.actionsSelectOptions;\n    if (!props.taxonomy) {\n        actionsSelectOptions = props.actionsSelectOptions.filter((item) => {\n            return ['category', 'category-add', 'category-remove', 'category-remove-all'].indexOf(item.value) === -1;\n        });\n    }\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n    const displayTaxonomyField = String(action).includes('category') && action !== 'category-remove-all';\n\n    let termsFieldLabel = taxonomyName;\n    switch (action) {\n        case 'category':\n            termsFieldLabel = props.strings.newTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-remove':\n            termsFieldLabel = props.strings.removeTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-add':\n            termsFieldLabel = props.strings.addTerms.replace('%s', taxonomyName);\n            break;\n    }\n\n    const validateData = () => {\n        let valid = true;\n\n        if (!enabled) {\n            setValidationError('');\n            return true;\n        }\n\n        if (!action) {\n            setValidationError(props.strings.errorActionRequired);\n            valid = false;\n        }\n\n        if (!date) {\n            setValidationError(props.strings.errorDateRequired);\n            valid = false;\n        }\n\n        // Check if the date is in the past\n        if (date && new Date(date) < new Date()) {\n            setValidationError(props.strings.errorDateInPast);\n            valid = false;\n        }\n\n        const isTermRequired = ['category', 'category-add', 'category-remove'].includes(action);\n        const noTermIsSelected = terms.length === 0 || (terms.length === 1 && (terms[0] === '' || terms[0] === '0'));\n\n        if (isTermRequired && noTermIsSelected) {\n            setValidationError(props.strings.errorTermsRequired);\n            valid = false;\n        }\n\n        if (valid) {\n            setValidationError('');\n        }\n\n        return valid;\n    }\n\n    useEffect(() => {\n        if (!enabled) {\n            setHasValidData(true);\n            setValidationError('');\n\n            return;\n        }\n\n        setHasValidData(validateData());\n    }, [action, date, enabled, terms, taxonomy]);\n\n    // This adds a 'cancel' class to the input when the user clicks on the\n    // field to prevent the form from being submitted. This is a workaround\n    // for the issue on the quick-edit form where the form is submitted when\n    // the user presses the 'Enter' key trying to add a term to the field.\n    const forceIgnoreAutoSubmitOnEnter = (e) => {\n        jQuery(e.target).addClass('cancel');\n    }\n\n    return (\n        <SlotFillProvider>\n            <div className={panelClass}>\n                {props.autoEnableAndHideCheckbox && (\n                    <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n                )}\n\n                <FutureActionPanelTop.Slot fillProps={{ storeName: props.storeName }} />\n\n                {!props.autoEnableAndHideCheckbox && (\n                    <PanelRow>\n                        <CheckboxControl\n                            label={props.strings.enablePostExpiration}\n                            checked={enabled || false}\n                            onChange={handleEnabledChange}\n                        />\n                    </PanelRow>\n                )}\n\n                {enabled && (\n                    <Fragment>\n                        <PanelRow className={contentPanelClass + ' future-action-full-width'}>\n                            <SelectControl\n                                label={props.strings.action}\n                                value={action}\n                                options={actionsSelectOptions}\n                                onChange={handleActionChange}\n                            />\n                        </PanelRow>\n\n                        <FutureActionPanelAfterActionField.Slot fillProps={{ storeName: props.storeName }} />\n\n                        {action === 'change-status' &&\n                            <PanelRow className=\"new-status\">\n                                <SelectControl\n                                    label={props.strings.newStatus}\n                                    options={props.statusesSelectOptions}\n                                    value={newStatus}\n                                    onChange={handleNewStatusChange}\n                                />\n                            </PanelRow>\n                        }\n\n                        {\n                            displayTaxonomyField && (\n                                isFetchingTerms && (\n                                    <PanelRow>\n                                        <BaseControl label={taxonomyName}>\n                                            {`${props.strings.loading} (${taxonomyName})`}\n                                            <Spinner />\n                                        </BaseControl>\n                                    </PanelRow>\n                                )\n                                || (!taxonomy && (\n                                    <PanelRow>\n                                        <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                            <div>\n                                                <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                            </div>\n                                        </BaseControl>\n                                    </PanelRow>\n                                )\n                                    || (\n                                        termsListByNameKeys.length === 0 && (\n                                            <PanelRow>\n                                                <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                                    <div>\n                                                        <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                                    </div>\n                                                </BaseControl>\n                                            </PanelRow>\n                                        )\n                                        || (\n                                            <PanelRow className=\"future-action-full-width\">\n                                                <BaseControl>\n                                                    <FormTokenField\n                                                        label={termsFieldLabel}\n                                                        value={selectedTerms}\n                                                        suggestions={termsListByNameKeys}\n                                                        onChange={handleTermsChange}\n                                                        placeholder={props.strings.addTermsPlaceholder}\n                                                        maxSuggestions={1000}\n                                                        onFocus={forceIgnoreAutoSubmitOnEnter}\n                                                        __experimentalExpandOnFocus={true}\n                                                        __experimentalAutoSelectFirstMatch={true}\n                                                    />\n                                                </BaseControl>\n                                            </PanelRow>\n                                        )\n                                    )\n                                )\n                            )\n                        }\n\n                        <PanelRow className={datePanelClass}>\n                            <ToggleCalendarDatePicker\n                                currentDate={date}\n                                onChangeDate={handleDateChange}\n                                onToggleCalendar={() => setCalendarIsVisible(!calendarIsVisible)}\n                                is12Hour={!is24hour}\n                                startOfWeek={props.startOfWeek}\n                                isExpanded={calendarIsVisible}\n                                strings={props.strings}\n                            />\n                        </PanelRow>\n\n                        <PanelRow>\n                            <div className=\"future-action-help-text\">\n                                <hr />\n\n                                <span className=\"dashicons dashicons-info\"></span> {HelpText}\n                            </div>\n                        </PanelRow>\n\n                        {!hasValidData && (\n                            <PanelRow>\n                                <BaseControl className=\"notice notice-error\">\n                                    <div>{validationError}</div>\n                                </BaseControl>\n                            </PanelRow>\n                        )}\n                    </Fragment>\n                )}\n            </div>\n            <PluginArea scope='publishpress-future' />\n        </SlotFillProvider>\n    );\n};\n","import { Slot, Fill } from '@wordpress/components';\n\nexport const FutureActionPanelAfterActionField = ({ children }) => (\n    <Fill name=\"FutureActionPanelAfterActionField\">\n        {children}\n    </Fill>\n);\n\nconst FutureActionPanelAfterActionFieldSlot = (props) => (\n    <Slot name=\"FutureActionPanelAfterActionField\" {...props} />\n);\n\nFutureActionPanelAfterActionField.Slot = FutureActionPanelAfterActionFieldSlot;\n\nexport default FutureActionPanelAfterActionField;\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['newStatus'] = store.getNewStatus();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n            newAttribute['extraData'] = store.getExtraData();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    const { lockPostSaving, unlockPostSaving } = useDispatch('core/editor');\n\n    const onDataIsValid = () => {\n        unlockPostSaving('future-action');\n    }\n\n    const onDataIsInvalid = () => {\n        lockPostSaving('future-action');\n    }\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    statusesSelectOptions={props.statusesSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    newStatus={data.newStatus}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings}\n                    onDataIsValid={onDataIsValid}\n                    onDataIsInvalid={onDataIsInvalid} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n    const { useEffect } = wp.element;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_new_status').value = select(props.storeName).getNewStatus();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    useEffect(() => {\n        // We are not using onDataIsValid and onDataIsInvalid because we need to enable/disable the button\n        // also based on the changeAction value.\n        if (hasValidData || changeAction === 'no-change') {\n            jQuery('#bulk_edit').prop('disabled', false);\n        } else {\n            jQuery('#bulk_edit').prop('disabled', true);\n        }\n    }, [hasValidData, changeAction]);\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    statusesSelectOptions={props.statusesSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    newStatus={newStatus}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_new_status'} value={newStatus} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\nimport { select, useSelect } from \"@wordpress/data\";\nimport { useEffect } from \"@wordpress/element\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_new_status').value = store.getNewStatus();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const getTermsFromElementByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return [];\n        }\n\n        let terms = element.value.split(',');\n\n        if (terms.length === 1 && terms[0] === '') {\n            terms = [];\n        }\n\n        return terms.map(term => parseInt(term));\n    }\n\n    const getElementValueByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return '';\n        }\n\n        return element.value;\n    }\n\n    const data = {\n        enabled: getElementValueByName('future_action_enabled') === '1',\n        action: getElementValueByName('future_action_action'),\n        newStatus: getElementValueByName('future_action_new_status'),\n        date: getElementValueByName('future_action_date'),\n        terms: getTermsFromElementByName('future_action_terms'),\n        taxonomy: getElementValueByName('future_action_taxonomy'),\n    };\n\n    const onDataIsValid = () => {\n        jQuery('#publish').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('#publish').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                statusesSelectOptions={props.statusesSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                newStatus={data.newStatus}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\nimport { useSelect, select } from '@wordpress/data';\nimport { useEffect } from '@wordpress/element';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const onDataIsValid = () => {\n        jQuery('.button-primary.save').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('.button-primary.save').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                statusesSelectOptions={props.statusesSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                newStatus={newStatus}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action ? action : ''} />\n            <input type=\"hidden\" name={'future_action_new_status'} value={newStatus ? newStatus : ''} />\n            <input type=\"hidden\" name={'future_action_date'} value={date ? date : ''} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString ? termsString : ''} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy ? taxonomy : ''} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { Slot, Fill } from '@wordpress/components';\n\nexport const FutureActionPanelTop = ({ children }) => (\n    <Fill name=\"FutureActionPanelTop\">\n        {children}\n    </Fill>\n);\n\nconst FutureActionPanelTopSlot = (props) => (\n    <Slot name=\"FutureActionPanelTop\" {...props} />\n);\n\nFutureActionPanelTop.Slot = FutureActionPanelTopSlot;\n\nexport default FutureActionPanelTop;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"@wordpress/element\";\n\nexport const NonceControl = function (props) {\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\nimport { useEffect, useState, Fragment, useRef } from '@wordpress/element';\nimport { addQueryArgs } from '@wordpress/url';\nimport { applyFilters } from '@wordpress/hooks';\nimport { apiFetch } from '&wp';\n\nconst { PanelRow, BaseControl } = wp.components;\n\nexport const PostTypeSettingsPanel = function (props) {\n    const originalExpireTypeList = props.expireTypeList[props.postType];\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n    const [hasValidData, setHasValidData] = useState(false);\n    const [validationError, setValidationError] = useState('');\n    const [taxonomyLabel, setTaxonomyLabel] = useState('');\n    const [howToExpireList, setHowToExpireList] = useState(originalExpireTypeList);\n    const [newStatus, setNewStatus] = useState(props.settings.newStatus);\n    const [hasPendingValidation, setHasPendingValidation] = useState(false);\n    const [offsetPreview, setOffsetPreview] = useState('');\n    const [currentTime, setCurrentTime] = useState();\n    const apiRequestControllerRef = useRef(new AbortController());\n\n    const taxonomyRelatedActions = [\n        'category',\n        'category-add',\n        'category-remove',\n        'category-remove-all'\n    ];\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    const validateData = () => {\n        if (! isActive) {\n            setValidationError('');\n            return true;\n        }\n\n        const offset = expireOffset ? expireOffset : props.settings.globalDefaultExpireOffset;\n\n        if (offset) {\n            const controller = apiRequestControllerRef.current;\n\n            if (controller) {\n                controller.abort();\n            }\n\n            apiRequestControllerRef.current = new AbortController();\n            const { signal } = apiRequestControllerRef.current;\n\n            setHasPendingValidation(true);\n\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/settings/validate-expire-offset`),\n                method: 'POST',\n                data: {\n                    offset\n                },\n                signal,\n            }).then((result) => {\n                setHasPendingValidation(false);\n\n                setHasValidData(result.isValid);\n                setValidationError(result.message);\n\n                if (result.isValid) {\n                    setOffsetPreview(result.preview);\n                    setCurrentTime(result.currentTime);\n                } else {\n                    setOffsetPreview('');\n                }\n            }).catch((error) => {\n                if (error.name === 'AbortError') {\n                    return;\n                }\n\n                setHasPendingValidation(false);\n                setHasValidData(false);\n                setValidationError(error.message);\n                setOffsetPreview('');\n            });\n        }\n\n        setValidationError('');\n        return true;\n    }\n\n    useEffect(() => {\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            let newExpireTypeList = [];\n\n            newExpireTypeList = howToExpireList.filter((item) => {\n                return taxonomyRelatedActions.indexOf(item.value) === -1;\n            });\n\n            setHowToExpireList(newExpireTypeList);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!postTypeTaxonomy || !props.taxonomiesList) {\n            return;\n        }\n\n        setTermsSelectIsLoading(true);\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${postTypeTaxonomy}`),\n        }).then((result) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n\n            result.terms.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setSelectedTerms(settingsTermsOptions);\n            setTermsSelectIsLoading(false);\n        });\n\n        props.taxonomiesList.forEach((taxonomy) => {\n            if (taxonomy.value === postTypeTaxonomy) {\n                setTaxonomyLabel(taxonomy.label);\n            }\n        });\n    }, [postTypeTaxonomy]);\n\n    useEffect(() => {\n        setHasValidData(validateData());\n    }, [isActive, expireOffset]);\n\n    useEffect(() => {\n        if (!taxonomyLabel) {\n            return;\n        }\n\n        // Update the list of actions replacing the taxonomy name.\n        let newExpireTypeList = [];\n\n        originalExpireTypeList.forEach((expireType) => {\n            let label = expireType.label;\n\n            if (taxonomyRelatedActions.indexOf(expireType.value) !== -1) {\n                label = label.replace('%s', taxonomyLabel.toLowerCase());\n            }\n\n            newExpireTypeList.push({\n                value: expireType.value,\n                label: label\n            });\n        });\n\n        setHowToExpireList(newExpireTypeList);\n    }, [taxonomyLabel]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid(props.postType);\n        }\n\n        if (!hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid(props.postType);\n        }\n    }, [hasValidData]);\n\n    useEffect(() => {\n        if (hasPendingValidation && props.onValidationStarted) {\n            props.onValidationStarted(props.postType);\n        }\n\n        if (!hasPendingValidation && props.onValidationFinished) {\n            props.onValidationFinished(props.postType);\n        }\n    }, [hasPendingValidation]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    description={props.text.fieldTaxonomyDescription}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={howToExpireList}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {settingHowToExpire === 'change-status' &&\n                    <SelectControl\n                        name={'expirationdate_newstatus-' + props.postType}\n                        options={props.statusesList}\n                        selected={newStatus}\n                        onChange={setNewStatus}\n                    />\n                }\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                        maxSuggestions={1000}\n                        expandOnFocus={true}\n                        autoSelectFirstMatch={true}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    loading={hasPendingValidation}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n\n                {offsetPreview && (\n                    <Fragment>\n                        <h4>{props.text.datePreview}</h4>\n                        <div>\n                            <div>\n                                <span>{props.text.datePreviewCurrent}: </span>\n                                <span><code>{currentTime}</code></span>\n                            </div>\n                            <div>\n                                <span>{props.text.datePreviewComputed}: </span>\n                                <span><code>{offsetPreview}</code></span>\n                            </div>\n                        </div>\n                    </Fragment>\n                )}\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n\n            {! hasValidData && (\n                <PanelRow>\n                    <div className=\"publishpress-future-notice publishpress-future-notice-error\">\n                        <strong>{props.text.error}:</strong> {validationError}\n                    </div>\n                </PanelRow>\n            )}\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                statusesList={props.statusesList[postType]}\n                key={`${postType}-panel`}\n                onDataIsValid={props.onDataIsValid}\n                onDataIsInvalid={props.onDataIsInvalid}\n                onValidationStarted={props.onValidationStarted}\n                onValidationFinished={props.onValidationFinished}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"@wordpress/element\";\nimport { SelectControl as WPSelectControl } from \"@wordpress/components\";\n\nexport const SelectControl = function (props) {\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <WPSelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"@wordpress/element\";\n\nexport const SettingRow = function (props) {\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"@wordpress/element\";\n\nexport const SettingsSection = function (props) {\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2024. PublishPress, All rights reserved.\n */\nexport const Spinner = function (props) {\n    return (\n        <span className=\"publishpress-future-spinner\"><div></div><div></div><div></div><div></div></span>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            disabled={props.disabled}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"@wordpress/element\";\nimport { TextControl as WPTextControl } from \"@wordpress/components\";\nimport { Spinner } from \"./\";\n\nexport const TextControl = function (props) {\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    let className = props.className ? props.className : '';\n\n    if (props.loading) {\n        className += ' publishpress-future-loading publishpress-future-loading-input';\n    }\n\n    return (\n        <Fragment>\n            <div className={className}>\n                <WPTextControl\n                    type=\"text\"\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.value}\n                    placeholder={props.placeholder}\n                    onChange={onChange}\n                />\n\n                {props.loading && <Spinner/>}\n\n                {description}\n            </div>\n        </Fragment>\n    )\n}\n","import { Button } from '@wordpress/components';\n\nexport const ToggleArrowButton = function (props) {\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","import { ToggleArrowButton } from \"./ToggleArrowButton\";\nimport { DateTimePicker } from \"./DateTimePicker\";\nimport { Fragment, useEffect } from \"@wordpress/element\";\n\nexport const ToggleCalendarDatePicker = (\n    {\n        isExpanded,\n        strings,\n        onToggleCalendar,\n        currentDate,\n        onChangeDate,\n        is12Hour,\n        startOfWeek\n    }\n) => {\n    useEffect(() => {\n        // Move the element of the toggle button to between the time and date elements.\n        const toggleButtonElement = document.querySelector('.future-action-calendar-toggle');\n\n        if (! toggleButtonElement) {\n            return;\n        }\n\n        const dateTimeElement = toggleButtonElement.nextElementSibling;\n\n        if (! dateTimeElement) {\n            return;\n        }\n\n        const timeElement = dateTimeElement.querySelector('.components-datetime__time');\n\n        if (! timeElement) {\n            return;\n        }\n\n        const dateElement = timeElement.nextSibling;\n\n        if (! dateElement) {\n            return;\n        }\n\n        dateTimeElement.insertBefore(toggleButtonElement, dateElement)\n    });\n\n    return (\n        <Fragment>\n            <ToggleArrowButton\n                className=\"future-action-calendar-toggle\"\n                isExpanded={isExpanded}\n                iconExpanded=\"arrow-up-alt2\"\n                iconCollapsed=\"calendar\"\n                titleExpanded={strings.hideCalendar}\n                titleCollapsed={strings.showCalendar}\n                onClick={onToggleCalendar} />\n\n            <DateTimePicker\n                currentDate={currentDate}\n                onChange={onChangeDate}\n                __nextRemoveHelpButton={true}\n                is12Hour={is12Hour}\n                startOfWeek={startOfWeek}\n            />\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState, useEffect } from \"@wordpress/element\";\nimport { FormTokenField } from \"@wordpress/components\";\n\nexport const TokensControl = (props) => {\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={props.maxSuggestions}\n                className=\"publishpres-future-token-field\"\n                __experimentalExpandOnFocus={props.expandOnFocus}\n                __experimentalAutoSelectFirstMatch={props.autoSelectFirstMatch}\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\nexport { Spinner } from \"./Spinner\";\n","import { formatUnixTimeToTimestamp, getCurrentTimeAsTimestamp, normalizeUnixTimeToSeconds } from './time';\nimport { isNumber } from './utils';\nimport { register, createReduxStore } from '@wordpress/data';\n\nexport const createStore = (props) => {\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        newStatus: props.defaultState.newStatus ? props.defaultState.newStatus : 'draft',\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n        hasValidData: true,\n        extraData: props.defaultState.extraData ? props.defaultState.extraData : {},\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_NEW_STATUS':\n                    return {\n                        ...state,\n                        newStatus: action.newStatus,\n                    };\n                case 'SET_DATE':\n                    // Make sure the date is a number, if it is a string with only numbers\n                    if (typeof action.date !== 'number' && isNumber(action.date)) {\n                        action.date = parseInt(action.date);\n                    }\n\n                    // If string, convert to unix time\n                    if (typeof action.date === 'string') {\n                        action.date = new Date(action.date).getTime();\n                    }\n\n                    // Make sure the time is always in seconds\n                    action.date = normalizeUnixTimeToSeconds(action.date);\n\n                    // Convert to formated string format, considering it is in the site's timezone\n                    action.date = formatUnixTimeToTimestamp(action.date);\n\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n                case 'SET_HAS_VALID_DATA':\n                    return {\n                        ...state,\n                        hasValidData: action.hasValidData,\n                    }\n\n                case 'SET_EXTRA_DATA':\n                    return {\n                        ...state,\n                        extraData: {\n                            ...action.extraData,\n                        }\n                    }\n\n                case 'SET_EXTRA_DATA_BY_NAME':\n                    const extraData = {\n                        ...state.extraData,\n                        [action.name]: action.value\n                    };\n\n                    return {\n                        ...state,\n                        extraData: {...extraData}\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setNewStatus(newStatus) {\n                return {\n                    type: 'SET_NEW_STATUS',\n                    newStatus: newStatus\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            },\n            setHasValidData(hasValidData) {\n                return {\n                    type: 'SET_HAS_VALID_DATA',\n                    hasValidData: hasValidData\n                }\n            },\n            setExtraData(extraData) {\n                return {\n                    type: 'SET_EXTRA_DATA',\n                    extraData: extraData\n                }\n            },\n            setExtraDataByName(name, value) {\n                return {\n                    type: 'SET_EXTRA_DATA_BY_NAME',\n                    name: name,\n                    value: value\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getNewStatus(state) {\n                return state.newStatus;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            },\n            getHasValidData(state) {\n                return state.hasValidData;\n            },\n            getExtraData(state) {\n                return state.extraData;\n            },\n            getExtraDataByName(state, name) {\n                return state.extraData[name] || null;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToSeconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length <= 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n\nexport const getActionSettingsFromColumnData = (postId) => {\n    const columnData = document.querySelector(`#post-expire-column-${postId}`);\n\n    if (!columnData) {\n        return {};\n    }\n\n    return {\n        enabled: columnData.dataset.actionEnabled === '1',\n        action: columnData.dataset.actionType,\n        date: columnData.dataset.actionDate,\n        dateUnix: columnData.dataset.actionDateUnix,\n        taxonomy: columnData.dataset.actionTaxonomy,\n        terms: columnData.dataset.actionTerms,\n        newStatus: columnData.dataset.actionNewStatus,\n    };\n}\n\n/**\n * This function is used to determine if a value is a number, including strings.\n *\n * @param {*} value\n * @returns\n */\nexport const isNumber = (value) => {\n    return !isNaN(value);\n}\n","module.exports = publishpressFutureBulkEditConfig;","module.exports = window;","module.exports = wp;","module.exports = wp.components;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.hooks;","module.exports = wp.plugins;","module.exports = wp.url;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FutureActionPanelBulkEdit } from './components';\nimport { createStore } from './data';\nimport { createRoot } from '@wordpress/element';\nimport { select, dispatch } from '@wordpress/data';\nimport { inlineEditPost } from \"&window\";\nimport {\n    postTypeDefaultConfig,\n    defaultDate,\n    postType,\n    isNewPost,\n    actionsSelectOptions,\n    is12Hour,\n    timeFormat,\n    startOfWeek,\n    strings,\n    taxonomyName,\n    nonce,\n    statusesSelectOptions\n} from \"&config.bulk-edit\";\n\nconst storeName = 'publishpress-future/future-action-bulk-edit';\nconst delayToUnmountAfterSaving = 1000;\n\n// We create a copy of the WP inline set bulk function\nconst wpInlineSetBulk = inlineEditPost.setBulk;\nconst wpInlineEditRevert = inlineEditPost.revert;\n\nconst getPostId = (id) => {\n    // If id is a string or a number, return it directly\n    if (typeof id === 'string' || typeof id === 'number') {\n        return id;\n    }\n\n    // Otherwise, assume it's an HTML element and extract the post ID\n    const trElement = id.closest('tr');\n    const trId = trElement.id;\n    const postId = trId.split('-')[1];\n\n    return postId;\n}\n\n/**\n * We override the function with our own code so we can detect when\n * the inline edit row is displayed to recreate the React component.\n */\ninlineEditPost.setBulk = function (id) {\n    // Call the original WP edit function.\n    wpInlineSetBulk.apply(this, arguments);\n\n    if (select(storeName)) {\n        dispatch(storeName).setAction(postTypeDefaultConfig.expireType);\n        dispatch(storeName).setDate(postTypeDefaultConfig.defaultDate);\n        dispatch(storeName).setTaxonomy(postTypeDefaultConfig.taxonomy);\n        dispatch(storeName).setTerms(postTypeDefaultConfig.terms);\n        dispatch(storeName).setChangeAction('no-change');\n    } else {\n        createStore({\n            name: storeName,\n            defaultState: {\n                action: postTypeDefaultConfig.expireType,\n                newStatus: postTypeDefaultConfig.newStatus,\n                date: defaultDate,\n                taxonomy: postTypeDefaultConfig.taxonomy,\n                terms: postTypeDefaultConfig.terms,\n                changeAction: 'no-change',\n            }\n        });\n    }\n\n    const container = document.getElementById(\"publishpress-future-bulk-edit\");\n    const root = createRoot(container);\n\n    const saveButton = document.querySelector('#bulk_edit');\n    if (saveButton) {\n        saveButton.onclick = function() {\n            setTimeout(() => {\n                root.unmount();\n            }, delayToUnmountAfterSaving);\n        };\n    }\n\n    const component = (\n        <FutureActionPanelBulkEdit\n            storeName={storeName}\n            postType={postType}\n            isNewPost={isNewPost}\n            actionsSelectOptions={actionsSelectOptions}\n            statusesSelectOptions={statusesSelectOptions}\n            is12Hour={is12Hour}\n            timeFormat={timeFormat}\n            startOfWeek={startOfWeek}\n            strings={strings}\n            taxonomyName={taxonomyName}\n            nonce={nonce}\n        />\n    );\n\n    root.render(component);\n\n    inlineEditPost.revert = function () {\n        root.unmount();\n\n        // Call the original WP revert function.\n        wpInlineEditRevert.apply(this, arguments);\n    };\n};\n"],"names":["ButtonsPanel","props","children","CheckboxControl","description","useState","checked","setChecked","unescapedDescription","className","dangerouslySetInnerHTML","__html","Fragment","label","name","id","onChange","value","DateTimePicker","currentDate","is12Hour","startOfWeek","normalizeUnixTimeToMilliseconds","__nextRemoveHelpButton","wp","components","PanelRow","SelectControl","FormTokenField","Spinner","BaseControl","element","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","hasValidData","getHasValidData","newStatus","getNewStatus","validationError","setValidationError","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","setHasValidData","setNewStatus","insertTerm","term","count","link","slug","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","path","then","result","forEach","getCalendarIsVisibleFromStorage","localStorage","getItem","context","autoEnableAndHideCheckbox","isCleanNewPost","setItem","onDataIsValid","onDataIsInvalid","selectedTerms","length","compact","map","mapTermsListById","termsListByNameKeys","Object","keys","is24hour","panelClass","contentPanelClass","datePanelClass","timeFormat","actionsSelectOptions","filter","item","indexOf","HelpText","string","href","target","parts","split","push","shift","before","after","key","replaceCurlyBracketsWithLink","strings","timezoneSettingsHelp","displayTaxonomyField","String","includes","termsFieldLabel","newTerms","replace","removeTerms","addTerms","valid","errorActionRequired","errorDateRequired","Date","errorDateInPast","isTermRequired","noTermIsSelected","errorTermsRequired","validateData","SlotFillProvider","type","FutureActionPanelTop","Slot","fillProps","enablePostExpiration","options","FutureActionPanelAfterActionField","statusesSelectOptions","loading","noTaxonomyFound","noTermsFound","suggestions","mapTermsListByName","placeholder","addTermsPlaceholder","maxSuggestions","onFocus","e","jQuery","addClass","__experimentalExpandOnFocus","__experimentalAutoSelectFirstMatch","ToggleCalendarDatePicker","onChangeDate","onToggleCalendar","isExpanded","PluginArea","scope","Fill","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","getEditedPostAttribute","lockPostSaving","unlockPostSaving","title","panelTitle","initialOpen","postTypeDefaultConfig","autoEnable","postType","store","newAttribute","getExtraData","publishpress_future_action","entries","editPostAttribute","FutureActionPanelBulkEdit","changeAction","getChangeAction","setChangeAction","termsString","join","noChange","changeAdd","addOnly","changeOnly","removeOnly","prop","futureActionUpdate","isNewPost","getElementByName","nonce","FutureActionPanelClassicEditor","getTimezoneOffset","document","getElementsByName","getElementValueByName","parseInt","getTermsFromElementByName","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","originalExpireTypeList","expireTypeList","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","taxonomyLabel","setTaxonomyLabel","howToExpireList","setHowToExpireList","hasPendingValidation","setHasPendingValidation","offsetPreview","setOffsetPreview","currentTime","setCurrentTime","apiRequestControllerRef","useRef","AbortController","taxonomyRelatedActions","newExpireTypeList","taxonomiesList","settingsTermsOptions","option","offset","globalDefaultExpireOffset","controller","current","abort","signal","method","isValid","message","preview","catch","error","expireType","toLowerCase","onValidationStarted","onValidationFinished","termOptionsLabels","settingsRows","SettingRow","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","selected","noItemFoundMessage","noItemsfound","fieldTaxonomyDescription","fieldHowToExpire","fieldHowToExpireDescription","statusesList","TokensControl","fieldTerm","isLoading","fieldTermDescription","expandOnFocus","autoSelectFirstMatch","fieldDefaultDateTimeOffset","TextControl","fieldDefaultDateTimeOffsetDescription","datePreview","datePreviewCurrent","datePreviewComputed","fieldWhoToNotify","fieldWhoToNotifyDescription","applyFilters","SettingsFieldset","legend","SettingsTable","bodyChildren","PostTypesSettingsPanels","panels","postTypeSettings","valign","htmlFor","SettingsForm","SettingsSection","SubmitButton","disabled","ToggleArrowButton","iconExpanded","iconCollapsed","icon","titleExpanded","titleCollapsed","Button","isSmall","onClick","toggleButtonElement","querySelector","dateTimeElement","nextElementSibling","timeElement","dateElement","nextSibling","insertBefore","hideCalendar","showCalendar","stringValue","setStringValue","TrueFalseControl","trueValue","is","defaultChecked","trueLabel","falseValue","falseLabel","createStore","defaultState","getCurrentTimeAsTimestamp","extraData","createReduxStore","reducer","state","isNumber","getTime","normalizeUnixTimeToSeconds","formatUnixTimeToTimestamp","actions","setExtraData","setExtraDataByName","selectors","getExtraDataByName","register","getCurrentTimeInSeconds","unixTimestamp","getFullYear","getMonth","slice","getHours","getMinutes","getSeconds","timeIsInSeconds","formatTimestampToUnixTime","time","toString","getFieldByName","array","Array","isArray","values","debugLogFactory","config","console","isDebugEnabled","debug","isGutenbergEnabled","body","classList","contains","postId","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","getActionSettingsFromColumnData","columnData","dataset","actionEnabled","actionType","actionDate","dateUnix","actionDateUnix","actionTaxonomy","actionTerms","actionNewStatus","isNaN","module","exports","publishpressFutureBulkEditConfig","window","hooks","plugins","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","wpInlineSetBulk","inlineEditPost","setBulk","wpInlineEditRevert","revert","apply","this","arguments","dispatch","defaultDate","container","getElementById","root","createRoot","saveButton","onclick","setTimeout","unmount","component","render"],"sourceRoot":""}