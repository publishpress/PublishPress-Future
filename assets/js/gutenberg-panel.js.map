{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/jsx/gutenberg-panel.jsx"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","Component","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","PostExpiratorSidebar","arguments","state","categoriesList","catIdVsName","attributes","postMeta","data","select","getEditedPostAttribute","postType","getCurrentPostType","setPostMeta","newMeta","dispatch","meta","enabled","date","Date","expireAction","getExpireType","categories","includes","getCategories","browserTimezoneOffset","getTimezoneOffset","wpTimezoneOffset","timezone_offset","setTime","default_categories","default_date","parseInt","taxonomy","defaults","setState","getTime","apiFetch","path","url","addQueryArgs","per_page","then","list","forEach","cat","name","id","strings","category","context","taxAttributes","rest_base","terms","term","attribute","getDate","actionsList","label","draft","value","delete","trash","private","stick","unstick","categoryReplace","categoryAdd","categoryRemove","selectedCats","map","postExpirator","enablePostExpiration","is_12_hours","howToExpire","loading","expirationCategories","Object","selectCategories","typeNew","typeOld","expireType","categoriesNew","categoriesOld","length","tokens","hasNoSuggestion","some","token","newDate","parse","render","window","postExpiratorPanelConfig"],"mappings":"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","file":"gutenberg-panel.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment, Component} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n\n    class PostExpiratorSidebar extends Component {\n        constructor() {\n            super(...arguments);\n\n            this.state = {\n                categoriesList: [],\n                catIdVsName: [],\n            }\n        }\n\n        componentWillMount() {\n            const {attributes} = this.state;\n\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n            const postType = wp.data.select('core/editor').getCurrentPostType();\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n\n            let enabled = false;\n            let date = new Date();\n\n            let expireAction = this.getExpireType(postMeta);\n\n            let categories = [];\n            if (expireAction.includes('category')) {\n                categories = this.getCategories(postMeta);\n            }\n\n            if (postMeta['_expiration-date-status'] && postMeta['_expiration-date-status'] === 'saved') {\n                enabled = true;\n            }\n\n            let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n            let wpTimezoneOffset = config.timezone_offset * 60;\n\n            if (postMeta['_expiration-date']) {\n                date.setTime((postMeta['_expiration-date'] + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            } else {\n                categories = config.default_categories;\n                if (config.default_date) {\n                    date.setTime((parseInt(config.default_date) + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n                }\n\n                // If the date is not set\n                enabled = false;\n            }\n\n            let taxonomy = config.defaults.taxonomy || 'category';\n\n            this.setState({\n                enabled: enabled,\n                date: date,\n                expireAction: expireAction,\n                categories: categories,\n                taxonomy: taxonomy,\n            });\n\n            // Force all the metadata to be saved. Required for making sure the default settings are stored correctly.\n            setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n            setPostMeta({'_expiration-date': (date.getTime()) / 1000});\n            setPostMeta({'_expiration-date-type': expireAction});\n            setPostMeta({'_expiration-date-categories': categories});\n\n            let categoriesList = [];\n            let catIdVsName = [];\n\n            if ((!taxonomy && postType === 'post') || taxonomy === 'category') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        categoriesList[cat.name] = cat;\n                        catIdVsName[cat.id] = cat.name;\n                    });\n                    this.setState({categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: config.strings.category});\n                });\n            } else {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, {context: 'edit'}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    wp.apiFetch({\n                        path: wp.url.addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit'}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            categoriesList[decodeEntities(term.name)] = term;\n                            catIdVsName[term.id] = decodeEntities(term.name);\n                        });\n                        this.setState({\n                            categoriesList: categoriesList,\n                            catIdVsName: catIdVsName,\n                            taxonomy: decodeEntities(taxAttributes.name)\n                        });\n                    });\n                });\n            }\n\n        }\n\n        componentDidUpdate() {\n            const {enabled, date, expireAction, categories, attribute} = this.state;\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n\n            switch (attribute) {\n                case 'enabled':\n                    setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n                    // if date is not set when the checkbox is enabled, set it to the default date\n                    // this is to prevent the user from having to click the date to set it\n                    if (!postMeta['_expiration-date']) {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'date':\n                    if (typeof date === 'string') {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'action':\n                    setPostMeta({'_expiration-date-type': expireAction});\n                    if (!expireAction.includes('category')) {\n                        setPostMeta({'_expiration-date-categories': []});\n                    }\n                    break;\n                case 'category':\n                    setPostMeta({'_expiration-date-categories': categories});\n                    break;\n            }\n\n        }\n\n        render() {\n            const {categoriesList, catIdVsName} = this.state;\n            const {enabled, date, expireAction, categories, taxonomy} = this.state;\n\n            const postType = wp.data.select('core/editor').getCurrentPostType();\n\n            let actionsList = [\n                {label: config.strings.draft, value: 'draft'},\n                {label: config.strings.delete, value: 'delete'},\n                {label: config.strings.trash, value: 'trash'},\n                {label: config.strings.private, value: 'private'},\n                {label: config.strings.stick, value: 'stick'},\n                {label: config.strings.unstick, value: 'unstick'},\n                {label: config.strings.categoryReplace, value: 'category'},\n                {label: config.strings.categoryAdd, value: 'category-add'},\n                {label: config.strings.categoryRemove, value: 'category-remove'},\n            ];\n\n            let selectedCats = categories && compact(categories.map((id) => catIdVsName[id] || false));\n            if (typeof selectedCats === 'string') {\n                selectedCats = [];\n            }\n\n            return (\n                <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                            initialOpen={enabled} className={'post-expirator-panel'}>\n                    <PanelRow>\n                        <CheckboxControl\n                            label={config.strings.enablePostExpiration}\n                            checked={enabled}\n                            onChange={(value) => {\n                                this.setState({enabled: !enabled, attribute: 'enabled'})\n                            }}\n                        />\n                    </PanelRow>\n                    {enabled && (\n                        <Fragment>\n                            <PanelRow>\n                                <DateTimePicker\n                                    currentDate={date}\n                                    onChange={(value) => this.setState({date: value, attribute: 'date'})}\n                                    is12Hour={config.is_12_hours}\n                                />\n                            </PanelRow>\n                            <SelectControl\n                                label={config.strings.howToExpire}\n                                value={expireAction}\n                                options={actionsList}\n                                onChange={(value) => {\n                                    this.setState({expireAction: value, attribute: 'action'})\n                                }}\n                            />\n                            {expireAction.includes('category') &&\n                            (\n                                (isEmpty(keys(categoriesList)) && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${taxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                ))\n                                ||\n                                (\n                                    <FormTokenField\n                                        label={config.strings.expirationCategories + ` (${taxonomy})`}\n                                        value={selectedCats}\n                                        suggestions={Object.keys(categoriesList)}\n                                        onChange={(value) => {\n                                            this.setState({\n                                                categories: this.selectCategories(value),\n                                                attribute: 'category'\n                                            })\n                                        }}\n                                        maxSuggestions={10}\n                                    />\n                                )\n                            )}\n                        </Fragment>\n                    )}\n                </PluginDocumentSettingPanel>\n            );\n        }\n\n        // what action to take on expiration\n        getExpireType(postMeta) {\n            let typeNew = postMeta['_expiration-date-type'];\n            let typeOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['expireType'];\n\n\n\n            if (typeNew) {\n                return typeNew;\n            }\n\n            if (typeOld) {\n                return typeOld;\n            }\n\n            if (config && config.defaults && config.defaults.expireType) {\n                return config.defaults.expireType;\n            }\n\n            return 'draft';\n        }\n\n        // what categories to add/remove/replace\n        getCategories(postMeta) {\n            let categoriesNew = postMeta['_expiration-date-categories'] && postMeta['_expiration-date-categories'];\n            let categoriesOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['category'];\n\n            if (typeof categoriesNew === 'object' && categoriesNew.length > 0) {\n                return categoriesNew;\n            }\n\n            if (categoriesOld && typeof categoriesOld !== 'undefined' && typeof categoriesOld !== 'object') {\n                categories = [categoriesOld];\n            }\n\n            return categoriesOld;\n\n        }\n\n        // fired for the autocomplete\n        selectCategories(tokens) {\n            const {categoriesList, catIdVsName} = this.state;\n\n            var hasNoSuggestion = tokens.some(function (token) {\n                return typeof token === 'string' && !categoriesList[token];\n            });\n\n            if (hasNoSuggestion) {\n                return;\n            }\n\n            var categories = tokens.map(function (token) {\n                return typeof token === 'string' ? categoriesList[token] : token;\n            })\n\n            return categories.map((cat) => cat.id);\n        }\n\n        getDate(date) {\n            let newDate = new Date();\n            let browserTimezoneOffset = new Date().getTimezoneOffset() * 60;\n            let wpTimezoneOffset = config.timezone_offset * 60;\n            newDate.setTime(Date.parse(date));\n            newDate.setTime(newDate.getTime() - (browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            return ((newDate.getTime()) / 1000);\n        }\n\n    }\n\n    registerPlugin('postexpirator-sidebar', {\n        render: PostExpiratorSidebar\n    });\n\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"sourceRoot":""}