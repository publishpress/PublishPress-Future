{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment, Component} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n\n    class PostExpiratorSidebar extends Component {\n        constructor() {\n            super(...arguments);\n\n            this.state = {\n                categoriesList: [],\n                catIdVsName: [],\n            }\n        }\n\n        componentWillMount() {\n            const {attributes} = this.state;\n\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n            const postType = wp.data.select('core/editor').getCurrentPostType();\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n\n            let enabled = false;\n            let date = new Date();\n\n            let expireAction = this.getExpireType(postMeta);\n\n            let categories = this.getCategories(postMeta);\n\n            if (postMeta['_expiration-date-status'] && postMeta['_expiration-date-status'] === 'saved') {\n                enabled = true;\n            }\n\n            let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n            let wpTimezoneOffset = config.timezone_offset * 60;\n\n            if (postMeta['_expiration-date']) {\n                date.setTime((postMeta['_expiration-date'] + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            } else {\n                categories = config.default_categories;\n                if (config.default_date) {\n                    date.setTime((parseInt(config.default_date) + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n                }\n\n                // If the date is not set\n                enabled = false;\n            }\n\n            let taxonomy = config.defaults.taxonomy || 'category';\n\n            this.setState({\n                enabled: enabled,\n                date: date,\n                expireAction: expireAction,\n                categories: categories,\n                taxonomy: taxonomy,\n            });\n\n            // Force all the metadata to be saved. Required for making sure the default settings are stored correctly.\n            setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n            setPostMeta({'_expiration-date': (date.getTime()) / 1000});\n            setPostMeta({'_expiration-date-type': expireAction});\n            setPostMeta({'_expiration-date-categories': categories});\n\n            let categoriesList = [];\n            let catIdVsName = [];\n\n            if ((!taxonomy && postType === 'post') || taxonomy === 'category') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        categoriesList[cat.name] = cat;\n                        catIdVsName[cat.id] = cat.name;\n                    });\n                    this.setState({categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: config.strings.category});\n                });\n            } else {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, {context: 'edit'}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    wp.apiFetch({\n                        path: wp.url.addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit'}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            categoriesList[decodeEntities(term.name)] = term;\n                            catIdVsName[term.id] = decodeEntities(term.name);\n                        });\n                        this.setState({\n                            categoriesList: categoriesList,\n                            catIdVsName: catIdVsName,\n                            taxonomy: decodeEntities(taxAttributes.name)\n                        });\n                    });\n                });\n            }\n\n        }\n\n        componentDidUpdate() {\n            const {enabled, date, expireAction, categories, attribute} = this.state;\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n\n            switch (attribute) {\n                case 'enabled':\n                    setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n                    // if date is not set when the checkbox is enabled, set it to the default date\n                    // this is to prevent the user from having to click the date to set it\n                    if (!postMeta['_expiration-date']) {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'date':\n                    if (typeof date === 'string') {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'action':\n                    setPostMeta({'_expiration-date-type': expireAction});\n                    if (!expireAction.includes('category')) {\n                        setPostMeta({'_expiration-date-categories': []});\n                    }\n                    break;\n                case 'category':\n                    setPostMeta({'_expiration-date-categories': categories});\n                    break;\n            }\n\n        }\n\n        render() {\n            const {categoriesList, catIdVsName} = this.state;\n            const {enabled, date, expireAction, categories, taxonomy} = this.state;\n\n            let selectedCats = categories && compact(categories.map((id) => catIdVsName[id] || false));\n            if (typeof selectedCats === 'string') {\n                selectedCats = [];\n            }\n\n            return (\n                <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                            initialOpen={enabled} className={'post-expirator-panel'}>\n                    <PanelRow>\n                        <CheckboxControl\n                            label={config.strings.enablePostExpiration}\n                            checked={enabled}\n                            onChange={(value) => {\n                                this.setState({enabled: !enabled, attribute: 'enabled'})\n                            }}\n                        />\n                    </PanelRow>\n                    {enabled && (\n                        <Fragment>\n                            <PanelRow>\n                                <DateTimePicker\n                                    currentDate={date}\n                                    onChange={(value) => this.setState({date: value, attribute: 'date'})}\n                                    is12Hour={config.is_12_hours}\n                                />\n                            </PanelRow>\n                            <SelectControl\n                                label={config.strings.howToExpire}\n                                value={expireAction}\n                                options={config.actions_options}\n                                onChange={(value) => {\n                                    this.setState({expireAction: value, attribute: 'action'})\n                                }}\n                            />\n                            {expireAction.includes('category') &&\n                            (\n                                (isEmpty(keys(categoriesList)) && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${taxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                ))\n                                ||\n                                (\n                                    <FormTokenField\n                                        label={config.strings.expirationCategories + ` (${taxonomy})`}\n                                        value={selectedCats}\n                                        suggestions={Object.keys(categoriesList)}\n                                        onChange={(value) => {\n                                            this.setState({\n                                                categories: this.selectCategories(value),\n                                                attribute: 'category'\n                                            })\n                                        }}\n                                        maxSuggestions={10}\n                                    />\n                                )\n                            )}\n                        </Fragment>\n                    )}\n                </PluginDocumentSettingPanel>\n            );\n        }\n\n        // what action to take on expiration\n        getExpireType(postMeta) {\n            let typeNew = postMeta['_expiration-date-type'];\n            let typeOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['expireType'];\n\n\n\n            if (typeNew) {\n                return typeNew;\n            }\n\n            if (typeOld) {\n                return typeOld;\n            }\n\n            if (config && config.defaults && config.defaults.expireType) {\n                return config.defaults.expireType;\n            }\n\n            return 'draft';\n        }\n\n        // what categories to add/remove/replace\n        getCategories(postMeta) {\n            let categoriesNew = postMeta['_expiration-date-categories'] && postMeta['_expiration-date-categories'];\n            let categoriesOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['category'];\n            let defaultCategories = config.defaults.terms ? config.defaults.terms.split(',') : [];\n\n            if (! categoriesNew && ! categoriesOld) {\n                return defaultCategories;\n            }\n\n            if (typeof categoriesNew === 'object' && categoriesNew.length > 0) {\n                return categoriesNew;\n            }\n\n            if (categoriesOld && typeof categoriesOld !== 'undefined' && typeof categoriesOld !== 'object') {\n                return [categoriesOld];\n            }\n\n            return defaultCategories;\n        }\n\n        // fired for the autocomplete\n        selectCategories(tokens) {\n            const {categoriesList, catIdVsName} = this.state;\n\n            var hasNoSuggestion = tokens.some(function (token) {\n                return typeof token === 'string' && !categoriesList[token];\n            });\n\n            if (hasNoSuggestion) {\n                return;\n            }\n\n            var categories = tokens.map(function (token) {\n                return typeof token === 'string' ? categoriesList[token] : token;\n            })\n\n            return categories.map((cat) => cat.id);\n        }\n\n        getDate(date) {\n            let newDate = new Date();\n            let browserTimezoneOffset = new Date().getTimezoneOffset() * 60;\n            let wpTimezoneOffset = config.timezone_offset * 60;\n            newDate.setTime(Date.parse(date));\n            newDate.setTime(newDate.getTime() - (browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            return ((newDate.getTime()) / 1000);\n        }\n\n    }\n\n    registerPlugin('postexpirator-sidebar', {\n        render: PostExpiratorSidebar\n    });\n\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","PluginDocumentSettingPanel","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","Component","decodeEntities","isEmpty","keys","compact","window","postExpiratorPanelConfig","plugins","editPost","components","element","htmlEntities","lodash","render","arguments","state","categoriesList","catIdVsName","postMeta","this","attributes","data","select","getEditedPostAttribute","postType","getCurrentPostType","setPostMeta","newMeta","dispatch","meta","enabled","date","Date","expireAction","getExpireType","categories","getCategories","browserTimezoneOffset","getTimezoneOffset","wpTimezoneOffset","timezone_offset","setTime","default_categories","default_date","parseInt","taxonomy","defaults","setState","getTime","apiFetch","path","url","addQueryArgs","per_page","then","list","forEach","cat","name","id","strings","category","context","taxAttributes","rest_base","terms","term","attribute","getDate","includes","selectedCats","map","title","postExpirator","icon","initialOpen","className","label","enablePostExpiration","checked","onChange","value","currentDate","is12Hour","is_12_hours","howToExpire","options","actions_options","loading","expirationCategories","suggestions","Object","selectCategories","maxSuggestions","typeNew","typeOld","expireType","categoriesNew","categoriesOld","defaultCategories","split","length","tokens","some","token","newDate","parse"],"sourceRoot":""}