#!/usr/bin/env bash
start_time=$(date +%s)

script_version="1.0.0"

source_path=$(pwd)
scripts_path="${source_path}/builder/docker/scripts"

#######################################
# Get the plugin name from composer.json file.
# Globals:
#   scripts_path
#   source_path
# Returns:
#   The plugin name.
#######################################
get_plugin_name() {
    php "${scripts_path}/parse-json.php" "${source_path}/composer.json" name | awk -F/ '{print $NF}'
}
plugin_name=$(get_plugin_name)

php_version="${1}"
command="${2}"
flat_php_version="${php_version//./}"
container_name="${plugin_name}-tests-${flat_php_version}"
wordpress_container_name="${container_name}-wordpress-1"
db_container_name="${container_name}-db-1"
project_root_path=$(pwd)
codeception_envs_path="${project_root_path}/tests/codeception/_envs"
remote_path_in_container="/var/www/html"
cols=$(tput cols)

#######################################
# Echo the string as an step in the output.
# Arguments:
#   The message to display.
# Outputs:
#   The passed string after an arrow.
#######################################
echo_step() {
    echo "â–¶ ${1}"
}

#######################################
# Start the docker services calling docker-compose
# for the compose file related to the selected
# PHP version.
# Globals:
#   php_version
#   container_name
# Outputs:
#   Docker compose output
#######################################
start_services() {
    docker compose -f "./tests/docker/docker-compose-tests-${php_version}.yml" -p "${container_name}" up -d
}

#######################################
# Stop the docker services calling docker-compose
# for the compose file related to the selected
# PHP version.
# Globals:
#   php_version
#   container_name
# Outputs:
#   Docker compose output
#######################################
stop_services() {
    docker compose -f "./tests/docker/docker-compose-tests-${php_version}.yml" -p "${container_name}" down
}

#######################################
# Get the service IP address.
# Globals:
#   container_name
# Outputs:
#   The IP address
#######################################
get_service_ip() {
    container_name="${1}"

    docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "${container_name}"
}

#######################################
# Get the service port.
# Arguments:
#   container_name
#   port
# Outputs:
#   The port number
#######################################
get_service_port() {
    container_name="${1}"
    port="${2}"

    docker inspect -f "{{(index (index .NetworkSettings.Ports \"${port}/tcp\") 0).HostPort}}" "${container_name}"
}

#######################################
# Show the IP addresses for all the services.
# Outputs:
#   The IP address
#######################################
get_ip_addresses() {
    wordpress_container_ip=$(get_service_ip "${wordpress_container_name}")
    db_container_ip=$(get_service_ip "${db_container_name}")

    port_80=$(get_service_port "${wordpress_container_name}" 80)
    port_443=$(get_service_port "${wordpress_container_name}" 443)
    port_3306=$(get_service_port "${db_container_name}" 3306)

    output=$(
        cat <<END
SERVICE|PORT|CONTAINER IP|FORWARDED PORT
wordrpess|80|${wordpress_container_ip}|${port_80}
wordrpess|443|${wordpress_container_ip}|${port_443}
db|3306|${db_container_ip}|${port_3306}
END
    )

    echo "$output" | column -t -s '|'
}

#######################################
# Get the paths for the mounted volume where
# WordPress is installed for the tests.
# Globals:
#   wordpress_container_name
# Outputs:
#   The path
#######################################
get_mount_path() {
    docker inspect -f '{{range.Mounts}}{{.Source}}{{end}}' "${wordpress_container_name}"
}

#######################################
# Fix permissions so current user can read
# and write files in the volume, if it in
# the group www-data.
# Globals:
#   wordpress_container_name
#   remote_path_in_container
#######################################
fix_volume_permissions() {
    docker exec "${wordpress_container_name}" find "${remote_path_in_container}" -type d -exec chmod 777 {} \;
    docker exec "${wordpress_container_name}" find "${remote_path_in_container}" -type f -exec chmod 666 {} \;
}

#######################################
# Create Codeception env files overriding
# the test params for matching the specific
# PHP version container addresses and data.
# Globals:
#   php_version
#   codeception_envs_path
#######################################
create_env_file() {
    env_file_name="${php_version}.yml"
    env_file_path="${codeception_envs_path}/${env_file_name}"
    template_file_path="${project_root_path}/tests/env.acceptance.template.yml"

    db_container_port=$(get_service_port "${db_container_name}" 3306)
    wordpress_container_port=$(get_service_port "${wordpress_container_name}" 80)
    mount_path=$(get_mount_path)

    test_site_db_host="127.0.0.1"
    test_site_db_port="${db_container_port}"
    test_site_db_name="wordpress"
    test_site_db_user="root"
    test_site_db_password="wordpress"
    test_site_wp_url="http:\/\/127.0.0.1:${wordpress_container_port}"
    test_site_wp_domain="127.0.0.1:${wordpress_container_port}"
    test_site_name="Tests on ${php_version}"
    test_site_admin_username="admin"
    test_site_admin_password="admin"

    # Remove current env file if exists
    # rm -rf "${env_file_path}" || true

    # Copy the template file and replace the variables
    cp "${template_file_path}" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_DB_HOST%/${test_site_db_host}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_DB_PORT%/${test_site_db_port}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_DB_NAME%/${test_site_db_name}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_DB_USER%/${test_site_db_user}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_DB_PASSWORD%/${test_site_db_password}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_WP_URL%/${test_site_wp_url}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_WP_DOMAIN%/${test_site_wp_domain}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_NAME%/${test_site_name}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_ADMIN_USERNAME%/${test_site_admin_username}/g" "${env_file_path}"
    sed -i.bak "s/%TEST_SITE_ADMIN_PASSWORD%/${test_site_admin_password}/g" "${env_file_path}"

    wp_root_folder=$(echo "${mount_path}" | sed "s/\//:::/g")
    sed -i.bak "s/%WP_ROOT_FOLDER%/${wp_root_folder}/g" "${env_file_path}"
    sed -i.bak "s/:::/\//g" "${env_file_path}"

    rm -f "${env_file_path}".bak
}

#######################################
# Create the ray config file
#######################################

create_ray_config() {
    wordpress_container_ip=$(get_service_ip "${wordpress_container_name}")
    mount_path=$(get_mount_path)

    config_content=$(
        cat <<EOF
<?php
return [
    /*
    * This settings controls whether data should be sent to Ray.
    */
    'enable' => true,

    /*
     *  The host used to communicate with the Ray app.
     */
    'host' => '${wordpress_container_ip}',

    /*
     *  The port number used to communicate with the Ray app.
     */
    'port' => 23517,

    /*
     *  Absolute base path for your sites or projects in Homestead, Vagrant, Docker, or another remote development server.
     */
    'remote_path' => '/var/www/html/',

    /*
     *  Absolute base path for your sites or projects on your local computer where your IDE or code editor is running on.
     */
    'local_path' => '${mount_path}',

    /*
     * When this setting is enabled, the package will not try to format values sent to Ray.
     */
    'always_send_raw_values' => false,
];

EOF
    )

    echo "${config_content}" >"$mount_path"/ray.php
}

#######################################
# Delete all the volumes containing the
# WordPress installation for tests.
# Globals:
#   project_root_path
#######################################
clean_volumes() {
    rm -rf "${project_root_path}/tests/docker/volumes/php*"
}

#######################################
# Delete all the env files.
# Globals:
#   codeception_envs_path
#######################################
clean_envs() {
    rm -f "${codeception_envs_path}/php*"
}

#######################################
# Add the current user to the www-data group,
# so it can read and write docker volume files.
#######################################
add_user_group() {
    sudo usermod -a -G www-data "$(whoami)"
}

#######################################
# Bootstrap the plugin into the container
# for being installed in the WordPress
# and tested.
#######################################
run_bootstrap() {
    mount_path=$(get_mount_path)
    tests/bin/bootstrap "${mount_path}"
}

#######################################
# Run the builder command without showing
# the header.
# Outputs: The output of the builder command.
#######################################
run_builder() {
    HIDE_HEADER=1 "$scripts_path"/build build-dir
}

#######################################
# Show a list of available envs for different
# PHP versions for testing.
# Outputs:
#   A list of codeception envs
#######################################
get_php_versions() {
    find tests/docker/ -type f -name 'docker-compose-tests-php*\.yml' | sed 's/tests\/docker\/docker-compose-tests-//g' | sed 's/\.yml//g'
}

#######################################
# Start ChromeDriver
#######################################

start_chromedriver() {
    chromedriver --url-base=/wd/hub &
}

#######################################
# Stop ChromeDriver
#######################################
stop_chromedriver() {
    ps aux | pgrep chromedriver | awk ' { print $2 } ' | xargs kill -9
}

#######################################
# Show the elapsed time since the script started.
# Globals:
#   start_time
# Outputs:
#   The runtime in seconds.
#######################################
show_runtime() {
    end_time=$(date +%s)
    runtime=$((end_time - start_time))
    echo ""
    echo "Runtime: $runtime sec"
}

#######################################
# Show the elapsed time since the script started.
# Globals:
#   start_time
# Outputs:
#   The runtime in seconds.
#######################################
show_elapsed_time() {
    end_time=$(date +%s)
    runtime=$((end_time - start_time))
    echo ""
    echo "Elapsed time: $runtime sec"
}

#######################################
# Repeats a string "n" times.
# Arguments:
#   The string to be repeated.
#   The number of times to repeat.
# Outputs:
#   The repeated string.
#######################################
repeat() {
    for ((c = 1; c <= "${2}"; c++)); do
        echo -n "${1}"
    done
}

#######################################
# Show the header for the script, showing
# a few details of the plugin.
# Globals:
#   script_version
#   plugin_name
#   php_version
# Outputs:
#   The formatted header.
#######################################
echo_header() {
    repeat "=" "$cols"
    line=$(repeat "-" "$cols"-16)
    echo "      __"
    echo "   -=(o '.      PUBLISHPRESS TESTS ASSISTANT - v${script_version}"
    echo "     '.-.\      ${line}"
    echo "     /|  \\      Name: ${plugin_name}"
    echo "     '|  ||     "
    echo "      _\_):,_   PHP Version: ${php_version}"
    echo ""
    repeat "=" "$cols"
    echo ""
}

#######################################
echo_header
case "${command}" in
"setup")
    add_user_group
    ;;
"start")
    echo "Start services:"
    echo ""
    echo_step "Starting the docker services"
    echo ""
    start_services
    echo ""

    echo_step "Creating Ray config file"
    create_ray_config

    echo_step "Fixing volume permissions"
    fix_volume_permissions

    echo_step "Bootstrapping"
    run_bootstrap

    echo_step "Creating the codeception env file"
    create_env_file

    echo_step "IP and Ports"
    echo ""
    get_ip_addresses
    echo ""

    echo_step "Starting ChromeDriver in the background"
    echo ""
    start_chromedriver

    echo ""
    echo "Start process finished!"
    show_runtime
    ;;
"bootstrap")
    echo "Bootstrapping the plugin for testing:"
    echo ""
    run_bootstrap

    echo ""
    echo "Plugin bootstrapped successfully!"
    show_runtime
    ;;
"stop")
    echo "Stop services:"
    echo ""

    echo_step "Stopping docker services"
    echo ""
    stop_services
    echo ""

    echo_step "Stopping ChromeDriver"
    echo ""
    stop_chromedriver
    echo ""

    echo ""
    echo "Stop process finished!"
    show_runtime
    ;;
"ip")
    get_ip_addresses
    ;;
"php-versions")
    get_php_versions
    ;;
"path")
    mount_path=$(get_mount_path)
    echo "WordPress path: ${mount_path}"
    ;;
"clean")
    echo "Cleaning:"
    echo ""

    echo_step "Cleaning the volumes"
    clean_volumes

    echo_step "Cleaning the codeception env files"

    echo ""
    echo "Files cleaned successfully!"
    clean_envs
    ;;
"brun")
    # Arguments passed to this command, after the third one, will all be passed to
    # codeception run command

    echo_step "IP and Ports"
    echo ""
    get_ip_addresses
    echo ""

    run_builder
    echo ""

    echo_step "Bootstrapping the plugin"
    run_bootstrap

    echo ""
    show_elapsed_time
    echo ""

    echo_step "Cleaning up codeception output"
    "$source_path"/vendor/bin/codecept clean

    echo_step "Running codeception tests: ${*:3}, env: ${php_version}"

    echo ""
    "$source_path"/vendor/bin/codecept run "${*:3}" --env "${php_version}"

    echo ""
    echo "Finish running tests!"
    show_runtime
    ;;
"run")
    echo_step "IP and Ports"
    echo ""
    get_ip_addresses
    echo ""

    echo_step "Cleaning up codeception output"
    "$source_path"/vendor/bin/codecept clean

    # Arguments passed to this command, after the third one, will all be passed to
    # codeception run command
    echo_step "Running codeception tests: ${*:3}, env: ${php_version}"

    echo ""
    "$source_path"/vendor/bin/codecept run "${*:3}" --env "${php_version}"

    echo ""
    echo "Finish running tests!"
    show_runtime
    ;;
*) echo "invalid option ${command}" ;;
esac
